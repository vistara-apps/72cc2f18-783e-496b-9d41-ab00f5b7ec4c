'use client';

import { useState } from 'react';
import { FileText, Download, Share2, MapPin } from 'lucide-react';
import { Button } from './Button';
import { Input } from './Input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from './Card';
import { ShareButton } from './ShareButton';
import { AlertBanner } from './AlertBanner';
import { getCurrentLocation, formatDate } from '@/lib/utils';
import { ShareableCard } from '@/lib/types';

interface ShareableCardGeneratorProps {
  language: 'en' | 'es';
}

export function ShareableCardGenerator({ language }: ShareableCardGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedCard, setGeneratedCard] = useState<ShareableCard | null>(null);
  const [incidentDetails, setIncidentDetails] = useState('');
  const [location, setLocation] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const handleGetLocation = async () => {
    try {
      const coords = await getCurrentLocation();
      if (coords) {
        setLocation(`${coords.latitude}, ${coords.longitude}`);
      } else {
        setError(language === 'en' 
          ? 'Unable to get location. Please enter manually.'
          : 'No se puede obtener la ubicación. Ingrese manualmente.'
        );
      }
    } catch (err) {
      console.error('Error getting location:', err);
      setError(language === 'en' 
        ? 'Location access denied.'
        : 'Acceso a ubicación denegado.'
      );
    }
  };

  const generateCard = async () => {
    if (!incidentDetails.trim()) {
      setError(language === 'en' 
        ? 'Please provide incident details.'
        : 'Por favor proporcione detalles del incidente.'
      );
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      // Here you would typically call your AI API to generate the card content
      // For now, we'll create a mock card
      const card: ShareableCard = {
        id: Date.now().toString(),
        title: language === 'en' ? 'Rights Documentation' : 'Documentación de Derechos',
        content: `${language === 'en' ? 'Incident Details' : 'Detalles del Incidente'}: ${incidentDetails}
        
${language === 'en' ? 'Location' : 'Ubicación'}: ${location || 'Not specified'}
${language === 'en' ? 'Time' : 'Hora'}: ${formatDate(new Date())}

${language === 'en' ? 'Know Your Rights' : 'Conozca Sus Derechos'}:
• ${language === 'en' ? 'Right to remain silent' : 'Derecho a permanecer en silencio'}
• ${language === 'en' ? 'Right to refuse searches' : 'Derecho a rechazar registros'}
• ${language === 'en' ? 'Right to an attorney' : 'Derecho a un abogado'}

${language === 'en' ? 'Generated by Know-Your-Rights Cards' : 'Generado por Know-Your-Rights Cards'}`,
        location: location || undefined,
        timestamp: new Date(),
      };

      setGeneratedCard(card);
    } catch (err) {
      console.error('Error generating card:', err);
      setError(language === 'en' 
        ? 'Failed to generate card. Please try again.'
        : 'Error al generar la tarjeta. Inténtelo de nuevo.'
      );
    } finally {
      setIsGenerating(false);
    }
  };

  const resetForm = () => {
    setGeneratedCard(null);
    setIncidentDetails('');
    setLocation('');
    setError(null);
  };

  return (
    <div className="space-y-6">
      {error && (
        <AlertBanner variant="error" onClose={() => setError(null)}>
          {error}
        </AlertBanner>
      )}

      {!generatedCard ? (
        <Card>
          <CardHeader>
            <CardTitle>
              {language === 'en' ? 'Generate Shareable Card' : 'Generar Tarjeta Compartible'}
            </CardTitle>
            <CardDescription>
              {language === 'en' 
                ? 'Create a shareable summary of your rights or incident details'
                : 'Cree un resumen compartible de sus derechos o detalles del incidente'
              }
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-white text-opacity-90 mb-2">
                {language === 'en' ? 'Incident Details' : 'Detalles del Incidente'}
              </label>
              <textarea
                value={incidentDetails}
                onChange={(e) => setIncidentDetails(e.target.value)}
                placeholder={language === 'en' 
                  ? 'Describe what happened, when, and any relevant details...'
                  : 'Describa qué pasó, cuándo y cualquier detalle relevante...'
                }
                className="input-field w-full h-32 resize-none"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-white text-opacity-90 mb-2">
                {language === 'en' ? 'Location (Optional)' : 'Ubicación (Opcional)'}
              </label>
              <div className="flex space-x-2">
                <Input
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  placeholder={language === 'en' 
                    ? 'Enter location or use GPS'
                    : 'Ingrese ubicación o use GPS'
                  }
                  className="flex-1"
                />
                <Button
                  onClick={handleGetLocation}
                  variant="ghost"
                  className="px-3"
                >
                  <MapPin className="w-4 h-4" />
                </Button>
              </div>
            </div>

            <Button
              onClick={generateCard}
              loading={isGenerating}
              className="w-full"
            >
              <FileText className="w-4 h-4 mr-2" />
              {language === 'en' ? 'Generate Card' : 'Generar Tarjeta'}
            </Button>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>
                {language === 'en' ? 'Generated Card' : 'Tarjeta Generada'}
              </CardTitle>
              <Button onClick={resetForm} variant="ghost" size="sm">
                {language === 'en' ? 'New Card' : 'Nueva Tarjeta'}
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="p-4 bg-white bg-opacity-10 rounded-lg">
              <h3 className="font-semibold text-white mb-2">{generatedCard.title}</h3>
              <pre className="text-sm text-white text-opacity-90 whitespace-pre-wrap font-sans leading-6">
                {generatedCard.content}
              </pre>
            </div>

            <div className="flex space-x-2">
              <ShareButton
                title={generatedCard.title}
                text={generatedCard.content}
                className="flex-1"
              />
              <Button variant="secondary" size="sm">
                <Download className="w-4 h-4 mr-2" />
                {language === 'en' ? 'Download' : 'Descargar'}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
